<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on Adam Cook</title>
    <link>https://adamcook.io/categories/powershell/</link>
    <description>Recent content in PowerShell on Adam Cook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://adamcook.io/categories/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hosting and Protecting Your Own NuGet Feed with ProGet</title>
      <link>https://adamcook.io/p/hosting-and-protecting-your-own-nuget-feed-with-proget/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamcook.io/p/hosting-and-protecting-your-own-nuget-feed-with-proget/</guid>
      <description>In this post I will share with you how to install Inedo&amp;rsquo;s ProGet to host your own NuGet feed (effectively your own PowerShell Gallery). This will let you share PowerShell modules and scripts amongst other systems and colleagues from an internal resource, using cmdlets from the PowerShellGet module e.g. Install-Module, Install-Script, Find-Module, Find-Script etc.
Why might you want to do this? Remember when PowerShell Gallery went down for a while in October?</description>
    </item>
    
    <item>
      <title>Getting Your Powershell Code Into Production Using Github Actions</title>
      <link>https://adamcook.io/p/getting-your-powershell-code-into-production-using-github-actions/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0100</pubDate>
      
      <guid>https://adamcook.io/p/getting-your-powershell-code-into-production-using-github-actions/</guid>
      <description>Earlier in the week I presented at a WinAdmins virtual user group session. At the bottom of this post you can watch the recording.
The session covered the below topics:
 Introduction to CI/CD pipeline, i.e. what it means with practical explanations A walk through on the YAML structure/syntax of GitHub Actions Demonstrate on how to use Actions by uploading content to Azure Blob storage Demonstrate a self hosted runner Demonstrate how to deploy a PowerShell module to: the PowerShell Gallery, create a new GitHub release, a shared folder within my home lab (which failed because I messed with the runner&amp;rsquo;s service log-on credential) and to a self hosted NuGet feed (which also failed, thanks demo gods)    </description>
    </item>
    
    <item>
      <title>Get CMUnusedSources</title>
      <link>https://adamcook.io/p/get-cmunusedsources/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0100</pubDate>
      
      <guid>https://adamcook.io/p/get-cmunusedsources/</guid>
      <description>I recently wrote a PowerShell script that reports on what folders are used or unused by System Center Configuration Manager.
You can find it here on GitHub.
I demoed the script at the London Windows Manager User Group, you can watch the recording below on YouTube.
  Among a bunch of technical topics, I also learned a huge amount of valuable soft/personal things too.
Enough is enough I started writing in February and since then I have refactored the script and the idea itself many times.</description>
    </item>
    
    <item>
      <title>Blank InstalledOn Property for Get-HotFix and Win32_QuickFixEngineering</title>
      <link>https://adamcook.io/p/blank-installedon-property-for-get-hotfix-and-win32_quickfixengineering/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0100</pubDate>
      
      <guid>https://adamcook.io/p/blank-installedon-property-for-get-hotfix-and-win32_quickfixengineering/</guid>
      <description>Want to get Windows Update status on a bunch of machines, only to discover the InstalledOn property is blank for lots of updates when you&amp;rsquo;re using Get-HotFix or querying Win32_QuickFixEngineering class with Get-WmiObject?
Turns out it&amp;rsquo;s related to PowerShell parsing the date as string to datetime object incorrectly, depending what your system locale is.
$Updates = Get-HotFix | Select-Object description,hotfixid,installedby,@{l=&amp;#34;InstalledOn&amp;#34;;e={[DateTime]::Parse($_.psbase.properties[&amp;#34;installedon&amp;#34;].value,$([System.Globalization.CultureInfo]::GetCultureInfo(&amp;#34;en-US&amp;#34;)))}} $Updates | Sort InstalledOn -Descending | Select -First 10 I like the above approach, as posted by user pyro3113,Â because the select expression lets you easily query remote systems using Get-HotFix or Get-WmiObject.</description>
    </item>
    
  </channel>
</rss>
